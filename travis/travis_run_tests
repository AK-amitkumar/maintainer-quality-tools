#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
from __future__ import unicode_literals
import os
import subprocess
import sys
from travis_helpers import success_msg, fail_msg


def main(test_list):
    args = sys.argv[1:]
    results = []
    for test in test_list:
        # keep backward compatibility with version as an argument
        print("======== Testing %s ========" % test[0])
        test_w_args = test + args
        res = subprocess.call(test_w_args)
        results.append(res)

    print()
    print("+" + "="*39)
    print("|  Tests summary:")
    print("|" + "-"*39)
    for test, error in zip(test_list, results):
        outcome = fail_msg if error else success_msg
        print("| {0:<28}{1}".format(test[0], outcome))
    print("+" + "="*39)
    return max(results)


if __name__ == '__main__':
    lint_check_disabled = os.environ.get('LINT_CHECK') == '0'
    lint_check_enabled = os.environ.get('LINT_CHECK') == '1'
    tests_enabled = os.environ.get('TESTS') == '1'
    tests_disabled = os.environ.get('TESTS') == '0'
    tests_unspecified = os.environ.get('TESTS') is None
    travis_enabled = os.environ.get('TRANSIFEX') == '1'
    transifex_enabled = os.environ.get('TRANSIFEX') == '1'

    # TRAVIS_PULL_REQUEST contains the pull request number or 'false'
    is_pull_request = os.environ.get('TRAVIS_PULL_REQUEST') != 'false'

    # Test list. Each test is a list with command + arguments.
    tests = []

    if not lint_check_disabled:
        tests.append(['test_flake8'])
        tests.append(['test_pylint'])

    if tests_unspecified and not lint_check_enabled:
        tests.append(['test_server.py'])

    if tests_enabled:
        tests.append(['test_server.py'])

    if transifex_enabled and not is_pull_request:
        tests.append(['travis_transifex.py'])

    if tests:
        exit(main(tests))
