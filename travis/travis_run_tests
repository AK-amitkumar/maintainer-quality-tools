#!/usr/bin/env python

from __future__ import unicode_literals
from __future__ import print_function

import os
import subprocess
import sys
from getaddons import get_addons
from getaddons import get_modules


def main():
    travis_home = os.environ.get("HOME", "~/")
    travis_build_dir = os.environ.get("TRAVIS_BUILD_DIR", "../..")
    odoo_exclude = os.environ.get("EXCLUDE")
    odoo_version = os.environ.get("VERSION")
    if not odoo_version:
        # For backward compatibility, take version from parameter
        # if it's not globally set
        odoo_version = sys.argv[1]
        print("WARNING: no env variable set for VERSION. "
              "Using '%s'" % odoo_version)

    if odoo_version == "6.1":
        options = ""
        install_options = "--test-disable"
    else:
        options = "--test-enable"
        install_options = ""

    odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
    odoo_org, odoo_repo = odoo_full.split('/')
    server_path = "../%s-%s" % (odoo_repo, odoo_version)
    addons_path_list = (
        get_addons(travis_build_dir) +
        get_addons(travis_home) +
        get_addons(server_path + "/addons"))
    addons_path = ','.join(addons_path_list)

    tested_addons_list = get_modules(travis_build_dir)
    if odoo_exclude:
        tested_addons_list = [
            x for x in tested_addons_list
            if x not in odoo_exclude.split(',')]
    tested_addons = ','.join(tested_addons_list)

    print("Working in %s" % travis_build_dir)
    print("Using repo %s and addons path %s" % (odoo_full, addons_path))
    print("Modules to test: %s" % tested_addons)

    ## setup the base module without running the tests
    print("\nCreating test instance:")
    database = "openerp_test"
    subprocess.call("createdb " + database, shell=True)
    subprocess.call(
        "%s/openerp-server %s -d %s --stop-after-init "
        "--addons-path=%s --init=%s"
        % (server_path, install_options, database, addons_path, tested_addons),
        shell=True)

    print("\nRunning server tests:")
    command = ("coverage run %s/openerp-server %s -d %s --stop-after-init "
               "--addons-path=%s --init=%s --log-level=test"
               ) % (server_path, options, database, addons_path, tested_addons)
    print(command)

    try:
        if odoo_version <= "7.0":
            subprocess.check_call(command + " | tee stdout.log", shell=True)
            # Find errors, except from failed mails
            stdout = open("stdout.log").readlines()
            errors = [
                x for x in stdout
                if "mail" not in x
                and ("ERROR %s" % database in x
                     or "At least one test failed" in x)]
            if errors:
                result = 1
        else:
            subprocess.check_call(command, shell=True)
        result = 0
    except subprocess.CalledProcessError:
        result = 1
    exit(result)


if __name__ == '__main__':
    main()
